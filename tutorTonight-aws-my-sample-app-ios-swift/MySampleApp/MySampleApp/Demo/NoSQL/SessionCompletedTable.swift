//
//  SessionCompletedTable.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.4
//

import Foundation
import UIKit
import AWSDynamoDB
import AWSMobileHubHelper

class SessionCompletedTable: NSObject, Table {
    
    var tableName: String
    var partitionKeyName: String
    var partitionKeyType: String
    var sortKeyName: String?
    var sortKeyType: String?
    var model: AWSDynamoDBObjectModel
    var indexes: [Index]
    var orderedAttributeKeys: [String] {
        return produceOrderedAttributeKeys(model)
    }
    var tableDisplayName: String {

        return "session_completed"
    }
    
    override init() {

        model = SessionCompleted()
        
        tableName = model.classForCoder.dynamoDBTableName()
        partitionKeyName = model.classForCoder.hashKeyAttribute()
        partitionKeyType = "String"
        indexes = [

            SessionCompletedSessionID(),
        ]
        if (model.classForCoder.respondsToSelector("rangeKeyAttribute")) {
            sortKeyName = model.classForCoder.rangeKeyAttribute!()
        }
        super.init()
    }
    
    /**
     * Converts the attribute name from data object format to table format.
     *
     * - parameter dataObjectAttributeName: data object attribute name
     * - returns: table attribute name
     */

    func tableAttributeName(dataObjectAttributeName: String) -> String {
        return SessionCompleted.JSONKeyPathsByPropertyKey()[dataObjectAttributeName] as! String
    }
    
    func getItemDescription() -> String {
        return "Find Item with sessionID = \("demo-sessionID-500000")."
    }
    
    func getItemWithCompletionHandler(completionHandler: (response: AWSDynamoDBObjectModel?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        objectMapper.load(SessionCompleted.self, hashKey: "demo-sessionID-500000", rangeKey: nil, completionHandler: {(response: AWSDynamoDBObjectModel?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
    func scanDescription() -> String {
        return "Show all items in the table."
    }
    
    func scanWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let scanExpression = AWSDynamoDBScanExpression()
        scanExpression.limit = 5

        objectMapper.scan(SessionCompleted.self, expression: scanExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
    func scanWithFilterDescription() -> String {
        return "Find all items with actualEndTime < \(1111500000)."
    }
    
    func scanWithFilterWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let scanExpression = AWSDynamoDBScanExpression()
        
        scanExpression.filterExpression = "#actualEndTime < :actualEndTime"
        scanExpression.expressionAttributeNames = ["#actualEndTime": "actualEndTime" ,]
        scanExpression.expressionAttributeValues = [":actualEndTime": 1111500000 ,]

        objectMapper.scan(SessionCompleted.self, expression: scanExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
    func insertSampleDataWithCompletionHandler(completionHandler: (errors: [NSError]?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        var errors: [NSError] = []
        let group: dispatch_group_t = dispatch_group_create()
        let numberOfObjects = 20
        

        let itemForGet = SessionCompleted()
        
        itemForGet._sessionID = "demo-sessionID-500000"
        itemForGet._actualEndTime = NoSQLSampleDataGenerator.randomSampleNumber()
        itemForGet._actualStartTime = NoSQLSampleDataGenerator.randomSampleNumber()
        itemForGet._courseCode = NoSQLSampleDataGenerator.randomSampleNumber()
        itemForGet._courseSubject = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("courseSubject")
        itemForGet._endTime = NoSQLSampleDataGenerator.randomSampleNumber()
        itemForGet._location = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("location")
        itemForGet._notes = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("notes")
        itemForGet._startTime = NoSQLSampleDataGenerator.randomSampleNumber()
        itemForGet._student = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("student")
        itemForGet._studentRating = NoSQLSampleDataGenerator.randomSampleNumber()
        itemForGet._studentRequestedTime = NoSQLSampleDataGenerator.randomSampleNumber()
        itemForGet._studentReview = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("studentReview")
        itemForGet._tutor = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("tutor")
        itemForGet._tutorAcceptedTime = NoSQLSampleDataGenerator.randomSampleNumber()
        itemForGet._tutorRating = NoSQLSampleDataGenerator.randomSampleNumber()
        itemForGet._tutorReview = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("tutorReview")
        
        
        dispatch_group_enter(group)
        

        objectMapper.save(itemForGet, completionHandler: {(error: NSError?) -> Void in
            if error != nil {
                dispatch_async(dispatch_get_main_queue(), {
                    errors.append(error!)
                })
            }
            dispatch_group_leave(group)
        })
        
        for _ in 1..<numberOfObjects {

            let item: SessionCompleted = SessionCompleted()
            item._sessionID = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("sessionID")
            item._actualEndTime = NoSQLSampleDataGenerator.randomSampleNumber()
            item._actualStartTime = NoSQLSampleDataGenerator.randomSampleNumber()
            item._courseCode = NoSQLSampleDataGenerator.randomSampleNumber()
            item._courseSubject = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("courseSubject")
            item._endTime = NoSQLSampleDataGenerator.randomSampleNumber()
            item._location = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("location")
            item._notes = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("notes")
            item._startTime = NoSQLSampleDataGenerator.randomSampleNumber()
            item._student = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("student")
            item._studentRating = NoSQLSampleDataGenerator.randomSampleNumber()
            item._studentRequestedTime = NoSQLSampleDataGenerator.randomSampleNumber()
            item._studentReview = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("studentReview")
            item._tutor = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("tutor")
            item._tutorAcceptedTime = NoSQLSampleDataGenerator.randomSampleNumber()
            item._tutorRating = NoSQLSampleDataGenerator.randomSampleNumber()
            item._tutorReview = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("tutorReview")
            
            dispatch_group_enter(group)
            
            objectMapper.save(item, completionHandler: {(error: NSError?) -> Void in
                if error != nil {
                    dispatch_async(dispatch_get_main_queue(), {
                        errors.append(error!)
                    })
                }
                dispatch_group_leave(group)
            })
        }
        
        dispatch_group_notify(group, dispatch_get_main_queue(), {
            if errors.count > 0 {
                completionHandler(errors: errors)
            }
            else {
                completionHandler(errors: nil)
            }
        })
    }
    
    func removeSampleDataWithCompletionHandler(completionHandler: (errors: [NSError]?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let scanExpression = AWSDynamoDBScanExpression()
        scanExpression.filterExpression = "begins_with(#sessionID, :sessionID)"
        scanExpression.expressionAttributeNames = ["#sessionID": "sessionID"]
        scanExpression.expressionAttributeValues = [":sessionID": "demo-"]

        objectMapper.scan(SessionCompleted.self, expression: scanExpression) { (response: AWSDynamoDBPaginatedOutput?, error: NSError?) in
            if let error = error {
                dispatch_async(dispatch_get_main_queue(), {
                    completionHandler(errors: [error]);
                    })
            } else {
                var errors: [NSError] = []
                let group: dispatch_group_t = dispatch_group_create()
                for item in response!.items {
                    dispatch_group_enter(group)
                    objectMapper.remove(item, completionHandler: {(error: NSError?) -> Void in
                        if error != nil {
                            dispatch_async(dispatch_get_main_queue(), {
                                errors.append(error!)
                            })
                        }
                        dispatch_group_leave(group)
                    })
                }
                dispatch_group_notify(group, dispatch_get_main_queue(), {
                    if errors.count > 0 {
                        completionHandler(errors: errors)
                    }
                    else {
                        completionHandler(errors: nil)
                    }
                })
            }
        }
    }
    
    func updateItem(item: AWSDynamoDBObjectModel, completionHandler: (error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        

        let itemToUpdate: SessionCompleted = item as! SessionCompleted
        
        itemToUpdate._actualEndTime = NoSQLSampleDataGenerator.randomSampleNumber()
        itemToUpdate._actualStartTime = NoSQLSampleDataGenerator.randomSampleNumber()
        itemToUpdate._courseCode = NoSQLSampleDataGenerator.randomSampleNumber()
        itemToUpdate._courseSubject = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("courseSubject")
        itemToUpdate._endTime = NoSQLSampleDataGenerator.randomSampleNumber()
        itemToUpdate._location = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("location")
        itemToUpdate._notes = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("notes")
        itemToUpdate._startTime = NoSQLSampleDataGenerator.randomSampleNumber()
        itemToUpdate._student = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("student")
        itemToUpdate._studentRating = NoSQLSampleDataGenerator.randomSampleNumber()
        itemToUpdate._studentRequestedTime = NoSQLSampleDataGenerator.randomSampleNumber()
        itemToUpdate._studentReview = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("studentReview")
        itemToUpdate._tutor = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("tutor")
        itemToUpdate._tutorAcceptedTime = NoSQLSampleDataGenerator.randomSampleNumber()
        itemToUpdate._tutorRating = NoSQLSampleDataGenerator.randomSampleNumber()
        itemToUpdate._tutorReview = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("tutorReview")
        
        objectMapper.save(itemToUpdate, completionHandler: {(error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(error: error)
            })
        })
    }
    
    func removeItem(item: AWSDynamoDBObjectModel, completionHandler: (error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        
        objectMapper.remove(item, completionHandler: {(error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(error: error)
            })
        })
    }
}

class SessionCompletedSessionID: NSObject, Index {
    
    var indexName: String? {

        return "sessionID"
    }
    
    func supportedOperations() -> [String] {
        return [
            QueryWithPartitionKey,
            QueryWithPartitionKeyAndFilter,
        ]
    }
    
    func queryWithPartitionKeyDescription() -> String {
        return "Find all items with sessionID = \("demo-sessionID-3")."
    }
    
    func queryWithPartitionKeyWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let queryExpression = AWSDynamoDBQueryExpression()
        

        queryExpression.indexName = "sessionID"
        queryExpression.keyConditionExpression = "#sessionID = :sessionID"
        queryExpression.expressionAttributeNames = ["#sessionID": "sessionID",]
        queryExpression.expressionAttributeValues = [":sessionID": "demo-sessionID-3",]

        objectMapper.query(SessionCompleted.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
    func queryWithPartitionKeyAndFilterDescription() -> String {
        return "Find all items with sessionID = \("demo-sessionID-3") and actualEndTime > \(1111500000)."
    }
    
    func queryWithPartitionKeyAndFilterWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let queryExpression = AWSDynamoDBQueryExpression()
        

        queryExpression.indexName = "sessionID"
        queryExpression.keyConditionExpression = "#sessionID = :sessionID"
        queryExpression.filterExpression = "#actualEndTime > :actualEndTime"
        queryExpression.expressionAttributeNames = [
            "#sessionID": "sessionID",
            "#actualEndTime": "actualEndTime",
        ]
        queryExpression.expressionAttributeValues = [
            ":sessionID": "demo-sessionID-3",
            ":actualEndTime": 1111500000,
        ]
        

        objectMapper.query(SessionCompleted.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
}
